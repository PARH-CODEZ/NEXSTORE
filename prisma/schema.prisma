generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserID       Int      @id @default(autoincrement())
  FullName     String
  Email        String   @unique
  PasswordHash String
  PhoneNumber  String?
  Role         String   // no enum, just plain string
  IsActive     Boolean  @default(true)
  CreatedAt    DateTime @default(now())
}

model UserAddress {
  AddressID     Int      @id @default(autoincrement())
  UserID        Int
  AddressLine1  String
  AddressLine2  String?
  City          String
  State         String?
  PostalCode    String
  Country       String
  IsDefault     Boolean  @default(false)
  AddressType   String?
  CreatedAt     DateTime @default(now())

  @@index([UserID])
}

model SellerProfile {
  SellerID        Int      @id
  BusinessName    String?
  GSTNumber String?
  TotalProducts   Int      @default(0)
  TotalOrders     Int      @default(0)
  Rating          Float?
  CreatedAt       DateTime @default(now())
}



model Categories {
  CategoryID       Int       @id @default(autoincrement())
  CategoryName     String
  Description      String?
  Slug             String?
  DisplayImageURL  String?
  CreatedAt        DateTime  @default(now())
  UpdatedAt        DateTime  @updatedAt

  products         Product[] @relation("CategoryProducts")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  imageUrl  String    @db.VarChar(255)
  createdAt DateTime  @default(now())

  products  Product[] @relation("BrandProducts")
}

model Product {
  id              Int              @id @default(autoincrement())
  categoryId      Int
  brandId         Int?
  name            String           @db.VarChar(150)
  slug            String           @unique
  description     String?          @db.Text
  price           Decimal          @db.Decimal(18, 2)
  discountPercent Decimal          @default(0) @db.Decimal(5, 2)
  isActive        Boolean          @default(true)
  isApproved      Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  category        Categories       @relation(fields: [categoryId], references: [CategoryID], name: "CategoryProducts")
  brand           Brand?           @relation(fields: [brandId], references: [id], name: "BrandProducts")

  images          ProductImage[]
  variants        ProductVariant[]
  specifications  ProductSpecification[]
  reviews         ProductReview[]
}

model ProductImage {
  id         Int              @id @default(autoincrement())
  productId  Int
  variantId  Int?             // Optional: if image is for a specific variant
  imageUrl   String           @db.VarChar(255)
  isPrimary  Boolean          @default(false)

  product    Product          @relation(fields: [productId], references: [id])
  variant    ProductVariant?  @relation(fields: [variantId], references: [id], name: "VariantImages")

  @@index([productId])
  @@index([variantId])
}

model ProductVariant {
  id                Int                        @id @default(autoincrement())
  productId         Int
  sku               String                     @unique
  variantName       String                     @db.VarChar(150)
  additionalPrice   Decimal                    @default(0) @db.Decimal(18, 2)
  quantityAvailable Int                        @default(0)
  isActive          Boolean                    @default(true)
  createdAt         DateTime                   @default(now())

  product           Product                    @relation(fields: [productId], references: [id])
  attributeMapping  ProductVariantAttributeMap[]
  images            ProductImage[]             @relation("VariantImages")

  @@index([productId])
}

model VariantAttribute {
  id        Int                      @id @default(autoincrement())
  name      String                   @unique @db.VarChar(50)
  values    VariantAttributeValue[]
}

model VariantAttributeValue {
  id          Int                      @id @default(autoincrement())
  attributeId Int
  value       String                   @db.VarChar(50)

  attribute   VariantAttribute         @relation(fields: [attributeId], references: [id])
  mappings    ProductVariantAttributeMap[]
}

model ProductVariantAttributeMap {
  id         Int                     @id @default(autoincrement())
  variantId  Int
  valueId    Int

  variant    ProductVariant          @relation(fields: [variantId], references: [id])
  value      VariantAttributeValue   @relation(fields: [valueId], references: [id])

  @@index([variantId])
  @@index([valueId])
}

model ProductSpecification {
  id        Int     @id @default(autoincrement())
  productId Int
  label     String  @db.VarChar(100)
  value     String  @db.VarChar(255)

  product   Product @relation(fields: [productId], references: [id])
}

model ProductReview {
  id         Int      @id @default(autoincrement())
  productId  Int
  userId     Int
  rating     Int      @default(5)
  review     String?
  createdAt  DateTime @default(now())

  product    Product  @relation(fields: [productId], references: [id])
}
